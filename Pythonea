import requests

# ------------- CONFIGURATION -------------
tenant = "epiqglobal.delinea.app"  # your Delinea tenant URL (no protocol prefix)
client_id = "YOUR_CLIENT_ID"
client_secret = "YOUR_CLIENT_SECRET"

scope = "xpmheadless"

# ------------- STEP 1: Get Access Token -------------
token_url = f"https://{tenant}/identity/api/oauth2/token/xpmplatform"
token_data = {
    "grant_type": "client_credentials",
    "client_id": client_id,
    "client_secret": client_secret,
    "scope": scope
}
token_headers = {"Content-Type": "application/x-www-form-urlencoded"}

resp = requests.post(token_url, data=token_data, headers=token_headers)
resp.raise_for_status()
access_token = resp.json().get("access_token")
print("✅ Access token obtained.")

# ------------- STEP 2: Get Secret Server URL -------------
vaults_url = f"https://{tenant}/vaultbroker/api/vaults"
vault_headers = {"Authorization": f"Bearer {access_token}", "Content-Type": "application/json"}

resp2 = requests.get(vaults_url, headers=vault_headers)
resp2.raise_for_status()
vaults = resp2.json().get("vaults", [])

secret_server_url = None
for vault in vaults:
    if vault.get("isDefault") and vault["connection"].get("url"):
        secret_server_url = vault["connection"]["url"].rstrip("/")
        break

if not secret_server_url:
    raise Exception("❌ No default Secret Server URL found.")

print(f"✅ Secret Server base URL: {secret_server_url}")

# ------------- STEP 3: Prompt for AD Username -------------
target_username = input("Enter the AD username you want to search for: ").strip().lower()
if not target_username:
    raise Exception("❌ Username cannot be empty.")

# ------------- STEP 4: Pull all secrets and filter by username field -------------
page = 1
page_size = 50
matched_secrets = []

while True:
    list_url = f"{secret_server_url}/api/v2/secrets?take={page_size}&skip={(page-1)*page_size}"
    list_headers = {"Authorization": f"Bearer {access_token}", "Content-Type": "application/json"}
    resp_list = requests.get(list_url, headers=list_headers)
    resp_list.raise_for_status()
    data = resp_list.json()

    secrets = data.get("records", [])
    if not secrets:
        break

    for s in secrets:
        secret_id = s["id"]
        secret_api_url = f"{secret_server_url}/api/v2/secrets/{secret_id}"
        resp_secret = requests.get(secret_api_url, headers=list_headers)
        if resp_secret.status_code != 200:
            continue
        secret_details = resp_secret.json()

        # Look for username field inside items
        items = secret_details.get("items", [])
        for field in items:
            if field.get("fieldName", "").lower() == "username":
                field_value = str(field.get("itemValue", "")).lower()
                if target_username in field_value:
                    matched_secrets.append({
                        "id": secret_id,
                        "name": secret_details.get("name"),
                        "folder": secret_details.get("folderName"),
                        "username": field_value
                    })
        # Optional: add other field types if needed

    if len(secrets) < page_size:
        break
    page += 1

if not matched_secrets:
    raise Exception(f"❌ No secrets found containing username: {target_username}")

print(f"✅ Found {len(matched_secrets)} matching secret(s):")
for i, s in enumerate(matched_secrets, start=1):
    print(f"{i}. SecretId={s['id']} | Name={s['name']} | Folder={s.get('folder','')} | Username={s['username']}")

choice = int(input("Select the secret number to retrieve fully: ").strip())
selected = matched_secrets[choice - 1]

# ------------- STEP 5: Retrieve and Show Full Secret -------------
secret_api_url = f"{secret_server_url}/api/v2/secrets/{selected['id']}"
resp_full = reques_
